Título: Procedimiento para mejorar el modelo ML.NET - ML.NET | Microsoft Learn
URL: https://learn.microsoft.com/es-es/dotnet/machine-learning/resources/improve-machine-learning-model-ml-net
Número de palabras: 669

Este explorador ya no se admite. Actualice a MicrosoftÂ Edge para aprovechar las caracterÃ­sticas y actualizaciones de seguridad mÃ¡s recientes, y disponer de soporte tÃ©cnico. Aprenda a mejorar el modelo ML.NET. En ocasiones, es posible que mejorar un modelo no tenga nada que ver con los datos o las tÃ©cnicas utilizadas para entrenar el modelo. En su lugar, puede que solo se estÃ© haciendo la pregunta incorrecta. Considere la posibilidad de abordar el problema desde distintos Ã¡ngulos y aproveche los datos para extraer los indicadores latentes y las relaciones ocultas para refinar la pregunta. Como los humanos, cuantos mÃ¡s algoritmos de aprendizaje se obtengan, mayor es la probabilidad de que aumente el rendimiento. Una manera de mejorar el rendimiento del modelo es proporcionar mÃ¡s ejemplos de datos de entrenamiento para los algoritmos. Cuanto mayor sea el nÃºmero de datos del que se aprende, mÃ¡s casos serÃ¡ capaz de identificar correctamente. El significado de un Ãºnico punto de datos puede ser difÃ­cil de interpretar. Crear contexto en torno a los puntos de datos ayuda a los algoritmos, asÃ­ como a los expertos en la materia a tomar mejores decisiones. Por ejemplo, el solo hecho de que una casa tenga tres dormitorios no es un buen indicador de su precio. Sin embargo, si agrega el contexto y ahora ya sabe que se encuentra en un vecindario suburbano de las afueras de un Ã¡rea metropolitana importante donde la edad media es de 38 aÃ±os, los ingresos medios por hogar son de 80 000 dÃ³lares y las escuelas estÃ¡n en el percentil 20 superior, el algoritmo proporciona mÃ¡s informaciÃ³n en la cual poder basar sus decisiones. Todo este contexto se puede agregar como entrada al modelo de Machine Learning como caracterÃ­sticas. Aunque mÃ¡s muestras de datos y caracterÃ­sticas pueden ayudar a mejorar la precisiÃ³n del modelo, tambiÃ©n es posible introducir ruido ya que no todos los datos y las caracterÃ­sticas son significativos. Por lo tanto, es importante entender quÃ© caracterÃ­sticas son las que tienen mayor impacto en las decisiones que toma el algoritmo. El uso de tÃ©cnicas como la importancia de caracterÃ­sticas de permutaciÃ³n (PFI) puede ayudar a identificar esas caracterÃ­sticas mÃ¡s destacadas y no solo ayuda a explicar el modelo, sino tambiÃ©n a usar la salida como un mÃ©todo de selecciÃ³n de caracterÃ­sticas para reducir la cantidad de caracterÃ­sticas ruidosas que entran en el proceso de entrenamiento. Para obtener mÃ¡s informaciÃ³n sobre cÃ³mo usar PFI, consulte ExplicaciÃ³n de las predicciones del modelo mediante la importancia de caracterÃ­sticas de permutaciÃ³n. La validaciÃ³n cruzada es una tÃ©cnica de evaluaciÃ³n de modelos y entrenamiento que divide los datos en diversas particiones y entrena varios algoritmos en estas particiones. Esta tÃ©cnica mejora la estabilidad del modelo que contiene datos del proceso de entrenamiento. AdemÃ¡s de mejorar el rendimiento en observaciones no vistas y en entornos con limitaciones de datos, puede ser una herramienta eficaz para el entrenamiento de modelos con un conjunto de datos mÃ¡s pequeÃ±o. Visite el siguiente vÃ­nculo para obtener informaciÃ³n sobre cÃ³mo utilizar la validaciÃ³n cruzada en ML.NET El entrenamiento de modelos de aprendizaje automÃ¡tico es un proceso iterativo y exploratorio. Por ejemplo, Â¿cuÃ¡l es el nÃºmero Ã³ptimo de clÃºsteres al entrenar un modelo con el algoritmo K-Means? La respuesta depende de muchos factores, como la estructura de los datos. Para buscar ese nÃºmero se necesitarÃ­a experimentar con diferentes valores de k y despuÃ©s evaluar el rendimiento para determinar quÃ© valor es el mejor. La prÃ¡ctica de ajustar los parÃ¡metros que guÃ­an el proceso de entrenamiento para encontrar un modelo Ã³ptimo se conoce como ajuste de hiperparÃ¡metros. Las tareas de aprendizaje automÃ¡tico, como la clasificaciÃ³n y la regresiÃ³n, contienen diversas implementaciones de algoritmos. Puede ser el caso de que el problema que intenta resolver y la manera en que sus datos estÃ¡n estructurados no se ajusten bien en el algoritmo actual. En este caso, considere el uso de un algoritmo diferente en la tarea para ver si aprende mejor de los datos. El siguiente vÃ­nculo proporciona mÃ¡s ayuda sobre quÃ© algoritmo elegir. .NET 