Título: El desarrollo de ‘software’ nativo de IA podría estar más cerca de lo que parece | CIO
URL: https://www.cio.com/article/3569686/el-desarrollo-de-software-nativo-de-ia-podria-estar-mas-cerca-de-lo-que-parece.html
Número de palabras: 1424

 Los desarrolladores no impresionados por los primeros resultados de la inteligencia artificial (IA) generativa para la codificación toman nota: el desarrollo de software se dirige hacia una nueva era, en la que la mayor parte del código será escrito por agentes de IA y revisado por desarrolladores experimentados, predice Gartner. Organizaciones y proveedores ya están desplegando agentes de codificación de IA que permiten a los desarrolladores automatizar completamente o descargar muchas tareas, y es probable que en 2025 se lancen más programas piloto y pruebas de concepto, afirma Philip Walsh, analista principal senior de la práctica de Ingeniería de Software de Gartner. Para 2026, “empezará a haber niveles de adopción más productivos y generalizados, en los que la gente habrá descubierto los puntos fuertes y débiles y los casos de uso en los que pueden recurrir más a un agente de IA autónomo”, afirma. “En el rango de 2027, veremos este paradigma echar raíces, y los flujos de trabajo y conjuntos de habilidades de los ingenieros tendrán que evolucionar y adaptarse realmente”. En un reciente comunicado de prensa, Gartner predijo que el 80% de los ingenieros de software tendrán que volver a capacitarse para encajar en los nuevos roles creados cuando la IA generativa asuma más funciones de programación. Estos agentes de codificación de IA serán más avanzados que los asistentes de codificación de IA de uso generalizado en la actualidad, pero seguirán necesitando programadores experimentados que comprueben su trabajo y ajusten el código, afirma Walsh. En lo que respecta al desarrollo de software, la IA agéntica -una tendencia en alza que hace hincapié en la toma de decisiones autónoma frente a la simple generación de contenidos- ampliará los límites de los actuales copilotos de codificación de IA para permitir la aparición de la ingeniería de software nativa de IA. Aunque los actuales asistentes de codificación de IA pueden escribir fragmentos de código, a menudo tienen dificultades para crear software desde cero, pero ese no será el caso de los agentes de codificación en evolución, afirma Walsh. “Puedes darle un objetivo o tarea de alto nivel, y trabajará de forma iterativa y adaptativa para resolver el problema”, afirma. “Eso es lo que llamamos un agente de ingeniería de software de IA. Esta tecnología ya existe”. A largo plazo, Walsh predice que los agentes de codificación de IA asumirán cada vez más las tareas de programación en muchas organizaciones, aunque la experiencia y la creatividad humanas seguirán siendo necesarias para afinar el código. Walsh reconoce que la actual cosecha de asistentes de programación de IA ha recibido críticas dispares hasta la fecha. Algunos estudios hablan de grandes aumentos de productividad, mientras que otros cuestionan esos resultados. A pesar de las críticas, la mayoría, si no todos, de los proveedores que ofrecen asistentes de codificación están avanzando hacia agentes autónomos, aunque la independencia total de la codificación de IA sigue siendo experimental, afirma Walsh. “La tecnología existe, pero es muy incipiente”, afirma. Los agentes de codificación de IA “siguen teniendo problemas con muchas cosas, como procesar contextos largos para identificar el código relevante que se ve afectado por la adición de una función o la corrección de un error o la refactorización de una mezcla de código complejo con muchas dependencias”. Los desarrolladores humanos siguen siendo necesarios para comprender el impacto sistemático de los cambios de código, incluidas todas las partes relevantes de la base de código que se ven afectadas, afirma Walsh. “Estas herramientas todavía luchan con ese tipo de nivel de imagen más grande, y también luchan con el aprovechamiento de la funcionalidad que ya tienes a mano”, dice. “Gran parte del problema con el código generado por IA no es necesariamente que no funcione bien, sino que ya lo hacemos de una determinada manera”. Algunas empresas ya se han subido al carro. Caylent, un socio de consultoría en la nube de AWS, utiliza IA para escribir la mayor parte de su código en casos específicos, dice Clayton Davis, director de Desarrollo Nativo en la Nube allí. La clave para usar IA para escribir código, dice, es tener un buen proceso de validación que encuentre errores. “Este enfoque de creación y validación basado en agentes es especialmente útil para las personas que ya están adoptando un enfoque de desarrollo basado en pruebas para escribir software”, dice Davis. “Con las pruebas existentes, escritas por humanos, basta con hacer un bucle a través del código generado, retroalimentando los errores, hasta llegar a un estado de éxito”. La siguiente evolución del modelo de agente de codificación consiste en que la IA no sólo escriba el código, sino también las pruebas de validación, las ejecute y corrija los errores, añade. “Esto requiere algunas herramientas avanzadas, varios agentes y probablemente los mejores resultados se obtengan con varios modelos que trabajen todos en pos de un estado final común”, afirma Davis. Incluso con algunos problemas por resolver y cierta resistencia por parte de los desarrolladores a los asistentes de codificación de IA, la codificación nativa de IA es el futuro, afirma Drew Dennison, director Técnico de la startup de seguridad de código Semgrep. Las herramientas de IA generativa avanzan con rapidez. Por ejemplo, OpenAI está promocionando su última versión de ChatGPT como un enorme salto adelante en la capacidad de codificación. “Cada vez hay más un mundo en el que los humanos dirigen estos ordenadores [controlados por IA] sobre cómo expresar sus pensamientos y luego dejan que el ordenador haga la mayor parte del trabajo pesado”, añade Dennison. Sin embargo, los vendedores y usuarios de agentes autónomos de codificación de IA tendrán que superar un par de retos, afirma Dennison. Los agentes de codificación tendrán que ser transparentes y permitir a los programadores revisar sus resultados. Dennison imagina un futuro en el que los agentes de IA escriban código las 24 horas del día, sin descansos por vacaciones o enfermedad. “Si el 90% del software lo escriben estos agentes, puede ser muy difícil llegar hasta las entrañas del software que ningún humano ha escrito o tocado nunca y entender lo que está pasando”, afirma. “Llevará demasiado tiempo entender que estos tipos están escribiendo 10, 100 o 1.000 veces más código. No vamos a leerlo todo”. Se necesitarán nuevas herramientas de revisión de código para ayudar a los equipos de desarrollo a entender todo este código escrito por la IA, añade Dennison. También se pregunta cómo cambiará la canalización del talento de los desarrolladores cuando la mayoría de los puestos de trabajo sean para desarrolladores sénior que revisan el código generado por IA y escriben pequeñas piezas de software complejo. Puede ser difícil formar a los desarrolladores cuando desaparezcan la mayoría de los puestos de trabajo junior. “¿Cómo se consigue entonces el tipo de trabajo que permite a los programadores junior cometer errores, aprender, desarrollar experiencia y sentir cómo debería funcionar todo esto?”, afirma. “Si solo estás quitando el 50% inferior del trabajo, entonces ¿cómo cruzas esa brecha y desarrollas esas habilidades?”. Con desafíos aún por abordar, algunos líderes de TI se muestran escépticos ante las predicciones de que los agentes de IA se harán cargo de la mayor parte de la escritura de código en un futuro próximo. Cuando los agentes de IA escriben un alto porcentaje del código de una organización, eso es genial para el bombo de marketing, pero pueden crear otros problemas, dice Bogdan Sergiienko, CTO en Master of Code Global, desarrollador de chatbots y aplicaciones móviles y web. “Los sistemas de completado de código existen desde hace muchos años, y el mayor reto en el desarrollo no es teclear el código en sí, sino mantener la integridad sistémica de miles de líneas de código”, afirma. Además, los agentes de IA no tendrán una comprensión a nivel humano de las intrincadas necesidades de cada organización, dice. “Los sistemas que tenemos actualmente simplifican la parte más fácil de la programación: escribir el código cuando ya se entiende todo”, añade Sergiienko. “Sin embargo, los esfuerzos y costes más significativos suelen surgir debido a una comprensión incompleta de los requisitos empresariales a todos los niveles, desde el propietario del producto hasta el desarrollador, así como a la necesidad de modificar los sistemas existentes cuando cambian los requisitos empresariales”. Grant Gross, a senior writer at CIO, is a long-time technology journalist. He previously served as Washington correspondent and later senior editor at IDG News Service. Earlier in his career, he was managing editor at Linux.com and news editor at tech careers site Techies.com. In the distant past, he worked as a reporter and editor at newspapers in Minnesota and the Dakotas.